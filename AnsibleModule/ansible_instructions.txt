###INSTRUCTIONS EN FRANCAIS###

I/ Introduction

Le but de ce projet est :
- d'installer et configurer un serveur ldap à distance,
- de restaurer les informations sur les unités organisationnelles et les utilisateurs d'un annuaire ldap.

Version de Ansible :
Ce projet a été écrit avec ansible 2.10.5.


II/ Inventaire Ansible

L’inventaire (ou inventory) comprend la liste des machines.
Par souci d'homogénéité, nous privilégierons le format yaml (tous les autres fichiers ansible sont en format yaml). En outre, grâce à son indentation, il permet de bien visualiser la hiérarchie des groupes et hosts.
Une machine est appelée host assez logiquement. Un ou plusieurs hosts peuvent consituer un groupe (group). Les hosts peuvent être décrit par des éléments permettant de les joindre : ip, dns principalement.
Ici, nous créerons le groupe hosts, enfant du groupe all.
Notre fichier inventory est donc composé de hosts et de groupes. Nous allons donc pouvoir définir des variables de groupes et d’autres spécifiquement pour des hosts. 


III/ Variables

Au même niveau que notre dossier inventory, on va retrouver deux répertoires :
- group_vars
- host_vars

Une fois dans ces répertoires nous allons pouvoir créer soit :
- des répertoires par groupe avec le nom du groupe ou par nom de host (vous pourrez ainsi créer plusieurs fichiers si vous avez beaucoup de variables et donc un besoin d’organiser un maximum),
- des fichiers yaml par nom de groupe ou nom de host (si vous avez peu de variables).


IV/ Rôles

Un rôle est une structure arborescente constituée de répertoires et de fichiers de configuration YAML, qui vont avoir pour fonction d’installer/configurer tel ou tel système. Les rôles peuvent être imbriqués et interdépendants les uns des autres.

Ici, nous déterminerons 3 rôles:
- openldap qui a pour tâches d'installer et configurer openLDAP.
- restoreAnnuary qui a pour tâches de restaurer l'annuaire ldap à l'aide d'un fichier ldif.
- ldapAccountManager qui a pour tâches d'installer ldap-account-manager, une interface Web permettant de gérer les entrées (par exemple, utilisateurs, groupes, paramètres DHCP) stockées dans un annuaire LDAP.


V/ Playbook

Un playbook Ansible est un fichier YAML dans lequel sont mentionnées tous les rôles et toutes les tâches qu'Ansible doit exécuter. 

Pour lancer notre playbook, nous devons utiliser la commande suivante :
root$ ansible-playbook -i inventory/mainInventory.yml -K mainPlaybook.yml


VI/ Organisation

Ci-après l'arborescence de notre module:
.
├── ansibleInstructions.txt
├── group_vars
│   └── hosts
│       └── variables.yml
├── handlers
│   └── main.yml
├── host_vars
│   └── srv-ldap-02
│       └── variables.yml
├── inventories
│   ├── mainInventory.ini
│   └── mainInventory.yml
├── mainPlaybook.yml
└── roles
    ├── ldapAccountManager
    │   └── tasks
    │       └── main.yml
    ├── openldap
    │   └── tasks
    │       └── main.yml
    └── restoreAnnuary
        └── tasks
            └── main.yml


###ENGLISH INSTRUCTIONS###

I/ Introduction

The aim of this project is:
- install and configure a remote ldap server,
- restore information on organizational units and users from an ldap directory.

Ansible version:
This project was written with ansible 2.10.5.


II/ Ansible Inventory

The inventory includes the list of machines.
For the sake of consistency, we will favor the yaml format (all other ansible files are in yaml format). In addition, thanks to its indentation, it allows you to clearly visualize the hierarchy of groups and hosts.
A machine is quite logically called a host. One or more hosts can constitute a group. The hosts can be described by elements allowing to join them: ip, dns mainly.
Here we will create the group 'hosts', a child of the group 'all'.
Our inventory file is therefore made up of hosts and groups. We will therefore be able to define group variables and others specifically for hosts.


III/ Variables

At the same level as our inventory folder, we will find two directories:
- group_vars
- host_vars

Once in these directories we will be able to create either:
- directories by group with the name of the group or by host name (you can thus create several files if you have a lot of variables and therefore need to organize as much as possible),
- yaml files by group name or host name (if you have few variables).


IV/ Ansible Roles

A role is a tree structure made up of directories and YAML configuration files, which will have the function of installing / configuring a particular system. Roles can be nested and interdependent on each other.

Here we will determine 3 roles:
- openldap which has the task of installing and configuring openLDAP.
- restoreAnnuary which has the task of restoring the ldap directory using an ldif file.
- ldapAccountManager which has the task of installing ldap-account-manager, a web interface allowing to manage entries (for example, users, groups, DHCP parameters) stored in an LDAP directory.


V/ Ansible Playbook

An Ansible playbook is a YAML file that lists all of the roles and tasks that Ansible needs to perform.

To launch our playbook, we need to use the following command:
root$ ansible-playbook -i inventory/mainInventory.yml -K mainPlaybook.yml


VI/ Organisation

Below is the tree structure of our module:
.
├── ansibleInstructions.txt
├── group_vars
│   └── hosts
│       └── variables.yml
├── handlers
│   └── main.yml
├── host_vars
│   └── srv-ldap-02
│       └── variables.yml
├── inventories
│   ├── mainInventory.ini
│   └── mainInventory.yml
├── mainPlaybook.yml
└── roles
    ├── ldapAccountManager
    │   └── tasks
    │       └── main.yml
    ├── openldap
    │   └── tasks
    │       └── main.yml
    └── restoreAnnuary
        └── tasks
            └── main.yml

